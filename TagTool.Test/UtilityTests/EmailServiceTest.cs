using TagTool.Data.Services;
using TagTool.Data.Secrets;
using TagTool.Data.Seeders;
using TagTool.Data.Repositories;
using TagTool.Data.Models;
using Xunit;
using System;
using RestSharp;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;

namespace TagTool.Test
{
    public class EmailServiceTest
    {

        private readonly HttpClient client;
        public EmailServiceTest(){ client = new HttpClient(); }
    
        private readonly string City = "TestCity";
        private readonly Report report = new Report()
        {
            ThreeWordAddress = "Test.Email.Service",
            AdditionalInfo = "Test Info"
        };
        private readonly List<User> MaiList = new List<User>()
        {
            new User(){
                EmailAddress = "9h5an.test@inbox.testmail.app"
            }
        };

        /* Test Cases */

        [Fact]
        public async void EmailService_SendMessage_CheckedWithTestMail()
        {
            // Given
            client.BaseAddress = new Uri("https://api.testmail.app/api/json");
            client.DefaultRequestHeaders.Accept.Add(
                new MediaTypeWithQualityHeaderValue("application/json"));
            var Query = client.BaseAddress + 
            "?apikey=" + GetKey.TestmailAPIKey() +
            "&namespace=9h5an";

            TestMailResponse EmailResponse = null;
            
            // when
            var Return = EmailService.SendMessage(MaiList, report, City);

            HttpResponseMessage response = await client.GetAsync(Query);
            if (response.IsSuccessStatusCode)
            {
                EmailResponse = await response.Content.ReadAsAsync<TestMailResponse>();
            }
            
            string ExpectedMessage = "A new Report has been created in TestCity. The Three word address of the report is: Test.Email.Service. To view on a map open:\n https://what3words.com/Test.Email.Service\n This report was created at 01/01/0001 00:00:00, and the following was the additional information provided: Test Info\n\n Thank you! \n This message was auto-generated by HelpingHand & sent via MailGun. \nIf you want to stop recieving these messages, please turn off notifications in your account settings.\n";
        
            bool EmailFound = false;
            for(int i = 0; i < EmailResponse.emails.Length; i++){
                var Email = EmailResponse.emails[i];
                if (Email.text == ExpectedMessage)
                {
                    EmailFound = true;
                }
            }


            // Then
            Assert.IsType<RestResponse>(Return);
            Assert.True(response.IsSuccessStatusCode);
            Assert.True(EmailFound);
        }
    }

    class TestMailResponse 
    {
        public string result { get; set; }
        public string message { get; set; }
        public int count { get; set; }
        public int limit { get; set; }
        public int offset { get; set; }

        public Email[] emails { get; set;}
    }
    class Email
    {
        public string text { get; set;}
    }
}